name: CI

on:
  push:
    branches:
      - 'main'
      - 'develop'
  pull_request:
    branches:
      - '*'

jobs:
  testsuite:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php-version: ['8.1']
        db-type: [mysql]
    name: PHP ${{ matrix.php-version }}

    steps:
    - name: Setup MySQL latest
      if: matrix.db-type == 'mysql'
      run: docker run --rm --name=mysqld -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=cakephp -p 3306:3306 -d mysql --default-authentication-plugin=mysql_native_password --disable-log-bin

    - uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mbstring, intl, apcu, sqlite, pdo_sqlite, pdo_${{ matrix.db-type }}, ${{ matrix.db-type }}
        coverage: none

    - name: Composer install
      run: |
        cp config/app_local.example.php config/app_local.php
        composer install --prefer-dist --no-interaction

    - name: Run PHPUnit
      run: |
        if [[ ${{ matrix.db-type }} == 'sqlite' ]]; then export DATABASE_URL='sqlite:///:memory:'; fi
        if [[ ${{ matrix.db-type }} == 'mysql' ]]; then export DATABASE_URL='mysql://root:root@127.0.0.1/cakephp?encoding=utf8'; fi
        vendor/bin/phpunit

#  coding-standard:
#    name: Coding Standard
#    runs-on: ubuntu-latest
#
#    steps:
#    - uses: actions/checkout@v3
#
#    - name: Setup PHP
#      uses: shivammathur/setup-php@v2
#      with:
#        php-version: '8.1'
#        extensions: mbstring, intl
#        coverage: none
#
#    - name: Composer install
#      run: composer install
#
#    - name: Run PHP CodeSniffer
#      run: composer cs-check
#
#  static-analysis:
#    name: Static Analysis
#    runs-on: ubuntu-latest
#
#    steps:
#    - uses: actions/checkout@v3
#
#    - name: Setup PHP
#      uses: shivammathur/setup-php@v2
#      with:
#        php-version: '8.1'
#        extensions: mbstring, intl
#        coverage: none
#
#    - name: Composer install
#      run: composer require --dev phpstan/phpstan:^1.0.0
#
#    - name: Run phpstan
#      run: vendor/bin/phpstan
